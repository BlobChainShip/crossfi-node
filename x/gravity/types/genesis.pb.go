// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The slashing fractions for the various gravity related slashing conditions. The first three
// refer to not submitting a particular message, the third for submitting a different claim
// for the same Ethereum event
//
// unbond_slashing_valsets_window
//
// The unbond slashing valsets window is used to determine how many blocks after starting to unbond
// a validator needs to continue signing blocks. The goal of this paramater is that when a validator leaves
// the set, if their leaving creates enough change in the validator set to justify an update they will sign
// a validator set update for the Ethereum bridge that does not include themselves. Allowing us to remove them
// from the Ethereum bridge and replace them with the new set gracefully.
//
// valset_reward
//
// These parameters allow for the bridge oracle to resolve a fork on the Ethereum chain without halting
// the chain. Once set reset bridge state will roll back events to the nonce provided in reset_bridge_nonce
// if and only if those events have not yet been observed (executed on the Cosmos chain). This allows for easy
// handling of cases where for example an Ethereum hardfork has occured and more than 1/3 of the vlaidtor set
// disagrees with the rest. Normally this would require a chain halt, manual genesis editing and restar to resolve
// with this feature a governance proposal can be used instead
//
// bridge_active
//
// This boolean flag can be used by governance to temporarily halt the bridge due to a vulnerability or other issue
// In this context halting the bridge means prevent the execution of any oracle events from Ethereum and preventing
// the creation of new batches that may be relayed to Ethereum.
// This does not prevent the creation of validator sets
// or slashing for not submitting validator set signatures as either of these might allow key signers to leave the validator
// set and steal funds on Ethereum without consequence.
// The practical outcome of this flag being set to 'false' is that deposits from Ethereum will not show up and withdraws from
// Cosmos will not execute on Ethereum.
//
// min_chain_fee_basis_points
//
// The minimum SendToEth `chain_fee` amount, in terms of basis points. e.g. 10% fee = 1000, and 0.02% fee = 2
type Params struct {
	Chains []*ChainParam `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetChains() []*ChainParam {
	if m != nil {
		return m.Chains
	}
	return nil
}

type ChainParam struct {
	GravityId                    string                                 `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	ContractSourceHash           string                                 `protobuf:"bytes,2,opt,name=contract_source_hash,json=contractSourceHash,proto3" json:"contract_source_hash,omitempty"`
	BridgeEthereumAddress        string                                 `protobuf:"bytes,4,opt,name=bridge_ethereum_address,json=bridgeEthereumAddress,proto3" json:"bridge_ethereum_address,omitempty"`
	BridgeChainId                uint64                                 `protobuf:"varint,5,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	SignedValsetsWindow          uint64                                 `protobuf:"varint,6,opt,name=signed_valsets_window,json=signedValsetsWindow,proto3" json:"signed_valsets_window,omitempty"`
	SignedBatchesWindow          uint64                                 `protobuf:"varint,7,opt,name=signed_batches_window,json=signedBatchesWindow,proto3" json:"signed_batches_window,omitempty"`
	SignedLogicCallsWindow       uint64                                 `protobuf:"varint,8,opt,name=signed_logic_calls_window,json=signedLogicCallsWindow,proto3" json:"signed_logic_calls_window,omitempty"`
	TargetBatchTimeout           uint64                                 `protobuf:"varint,9,opt,name=target_batch_timeout,json=targetBatchTimeout,proto3" json:"target_batch_timeout,omitempty"`
	AverageBlockTime             uint64                                 `protobuf:"varint,10,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AverageEthereumBlockTime     uint64                                 `protobuf:"varint,11,opt,name=average_ethereum_block_time,json=averageEthereumBlockTime,proto3" json:"average_ethereum_block_time,omitempty"`
	SlashFractionValset          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=slash_fraction_valset,json=slashFractionValset,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_valset"`
	SlashFractionBatch           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=slash_fraction_batch,json=slashFractionBatch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_batch"`
	SlashFractionLogicCall       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=slash_fraction_logic_call,json=slashFractionLogicCall,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_logic_call"`
	UnbondSlashingValsetsWindow  uint64                                 `protobuf:"varint,15,opt,name=unbond_slashing_valsets_window,json=unbondSlashingValsetsWindow,proto3" json:"unbond_slashing_valsets_window,omitempty"`
	SlashFractionBadEthSignature github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=slash_fraction_bad_eth_signature,json=slashFractionBadEthSignature,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_bad_eth_signature"`
	ValsetReward                 types.Coin                             `protobuf:"bytes,17,opt,name=valset_reward,json=valsetReward,proto3" json:"valset_reward"`
	BridgeActive                 bool                                   `protobuf:"varint,18,opt,name=bridge_active,json=bridgeActive,proto3" json:"bridge_active,omitempty"`
	// addresses on this blacklist are forbidden from depositing or withdrawing
	// from Ethereum to the bridge
	EthereumBlacklist      []string `protobuf:"bytes,19,rep,name=ethereum_blacklist,json=ethereumBlacklist,proto3" json:"ethereum_blacklist,omitempty"`
	MinChainFeeBasisPoints uint64   `protobuf:"varint,20,opt,name=min_chain_fee_basis_points,json=minChainFeeBasisPoints,proto3" json:"min_chain_fee_basis_points,omitempty"`
	ChainId                string   `protobuf:"bytes,21,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ChainParam) Reset()         { *m = ChainParam{} }
func (m *ChainParam) String() string { return proto.CompactTextString(m) }
func (*ChainParam) ProtoMessage()    {}
func (*ChainParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{1}
}
func (m *ChainParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParam.Merge(m, src)
}
func (m *ChainParam) XXX_Size() int {
	return m.Size()
}
func (m *ChainParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParam.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParam proto.InternalMessageInfo

func (m *ChainParam) GetGravityId() string {
	if m != nil {
		return m.GravityId
	}
	return ""
}

func (m *ChainParam) GetContractSourceHash() string {
	if m != nil {
		return m.ContractSourceHash
	}
	return ""
}

func (m *ChainParam) GetBridgeEthereumAddress() string {
	if m != nil {
		return m.BridgeEthereumAddress
	}
	return ""
}

func (m *ChainParam) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *ChainParam) GetSignedValsetsWindow() uint64 {
	if m != nil {
		return m.SignedValsetsWindow
	}
	return 0
}

func (m *ChainParam) GetSignedBatchesWindow() uint64 {
	if m != nil {
		return m.SignedBatchesWindow
	}
	return 0
}

func (m *ChainParam) GetSignedLogicCallsWindow() uint64 {
	if m != nil {
		return m.SignedLogicCallsWindow
	}
	return 0
}

func (m *ChainParam) GetTargetBatchTimeout() uint64 {
	if m != nil {
		return m.TargetBatchTimeout
	}
	return 0
}

func (m *ChainParam) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *ChainParam) GetAverageEthereumBlockTime() uint64 {
	if m != nil {
		return m.AverageEthereumBlockTime
	}
	return 0
}

func (m *ChainParam) GetUnbondSlashingValsetsWindow() uint64 {
	if m != nil {
		return m.UnbondSlashingValsetsWindow
	}
	return 0
}

func (m *ChainParam) GetValsetReward() types.Coin {
	if m != nil {
		return m.ValsetReward
	}
	return types.Coin{}
}

func (m *ChainParam) GetBridgeActive() bool {
	if m != nil {
		return m.BridgeActive
	}
	return false
}

func (m *ChainParam) GetEthereumBlacklist() []string {
	if m != nil {
		return m.EthereumBlacklist
	}
	return nil
}

func (m *ChainParam) GetMinChainFeeBasisPoints() uint64 {
	if m != nil {
		return m.MinChainFeeBasisPoints
	}
	return 0
}

func (m *ChainParam) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// GenesisState struct, containing all persistant data required by the Gravity module
type GenesisState struct {
	Params *Params         `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Chains []*GravityChain `protobuf:"bytes,2,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetChains() []*GravityChain {
	if m != nil {
		return m.Chains
	}
	return nil
}

type GravityChain struct {
	ChainId            string                      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	GravityNonces      GravityNonces               `protobuf:"bytes,2,opt,name=gravity_nonces,json=gravityNonces,proto3" json:"gravity_nonces"`
	Valsets            []Valset                    `protobuf:"bytes,3,rep,name=valsets,proto3" json:"valsets"`
	ValsetConfirms     []MsgValsetConfirm          `protobuf:"bytes,4,rep,name=valset_confirms,json=valsetConfirms,proto3" json:"valset_confirms"`
	Batches            []OutgoingTxBatch           `protobuf:"bytes,5,rep,name=batches,proto3" json:"batches"`
	BatchConfirms      []MsgConfirmBatch           `protobuf:"bytes,6,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms"`
	LogicCalls         []OutgoingLogicCall         `protobuf:"bytes,7,rep,name=logic_calls,json=logicCalls,proto3" json:"logic_calls"`
	LogicCallConfirms  []MsgConfirmLogicCall       `protobuf:"bytes,8,rep,name=logic_call_confirms,json=logicCallConfirms,proto3" json:"logic_call_confirms"`
	Attestations       []Attestation               `protobuf:"bytes,9,rep,name=attestations,proto3" json:"attestations"`
	DelegateKeys       []MsgSetOrchestratorAddress `protobuf:"bytes,10,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys"`
	Erc20ToDenoms      []ERC20ToDenom              `protobuf:"bytes,11,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms"`
	UnbatchedTransfers []OutgoingTransferTx        `protobuf:"bytes,12,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers"`
}

func (m *GravityChain) Reset()         { *m = GravityChain{} }
func (m *GravityChain) String() string { return proto.CompactTextString(m) }
func (*GravityChain) ProtoMessage()    {}
func (*GravityChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{3}
}
func (m *GravityChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GravityChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GravityChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GravityChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityChain.Merge(m, src)
}
func (m *GravityChain) XXX_Size() int {
	return m.Size()
}
func (m *GravityChain) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityChain.DiscardUnknown(m)
}

var xxx_messageInfo_GravityChain proto.InternalMessageInfo

func (m *GravityChain) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *GravityChain) GetGravityNonces() GravityNonces {
	if m != nil {
		return m.GravityNonces
	}
	return GravityNonces{}
}

func (m *GravityChain) GetValsets() []Valset {
	if m != nil {
		return m.Valsets
	}
	return nil
}

func (m *GravityChain) GetValsetConfirms() []MsgValsetConfirm {
	if m != nil {
		return m.ValsetConfirms
	}
	return nil
}

func (m *GravityChain) GetBatches() []OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *GravityChain) GetBatchConfirms() []MsgConfirmBatch {
	if m != nil {
		return m.BatchConfirms
	}
	return nil
}

func (m *GravityChain) GetLogicCalls() []OutgoingLogicCall {
	if m != nil {
		return m.LogicCalls
	}
	return nil
}

func (m *GravityChain) GetLogicCallConfirms() []MsgConfirmLogicCall {
	if m != nil {
		return m.LogicCallConfirms
	}
	return nil
}

func (m *GravityChain) GetAttestations() []Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *GravityChain) GetDelegateKeys() []MsgSetOrchestratorAddress {
	if m != nil {
		return m.DelegateKeys
	}
	return nil
}

func (m *GravityChain) GetErc20ToDenoms() []ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func (m *GravityChain) GetUnbatchedTransfers() []OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

// GravityCounters contains the many noces and counters required to maintain the bridge state in the genesis
type GravityNonces struct {
	// the nonce of the last generated validator set
	LatestValsetNonce uint64 `protobuf:"varint,1,opt,name=latest_valset_nonce,json=latestValsetNonce,proto3" json:"latest_valset_nonce,omitempty"`
	// the last observed Gravity.sol contract event nonce
	LastObservedNonce uint64 `protobuf:"varint,2,opt,name=last_observed_nonce,json=lastObservedNonce,proto3" json:"last_observed_nonce,omitempty"`
	// the last valset nonce we have slashed, to prevent double slashing
	LastSlashedValsetNonce uint64 `protobuf:"varint,3,opt,name=last_slashed_valset_nonce,json=lastSlashedValsetNonce,proto3" json:"last_slashed_valset_nonce,omitempty"`
	// the last batch Cosmos chain block that batch slashing has completed for
	// there is an individual batch nonce for each token type so this removes
	// the need to store them all
	LastSlashedBatchBlock uint64 `protobuf:"varint,4,opt,name=last_slashed_batch_block,json=lastSlashedBatchBlock,proto3" json:"last_slashed_batch_block,omitempty"`
	// the last cosmos block that logic call slashing has completed for
	LastSlashedLogicCallBlock uint64 `protobuf:"varint,5,opt,name=last_slashed_logic_call_block,json=lastSlashedLogicCallBlock,proto3" json:"last_slashed_logic_call_block,omitempty"`
	// the last transaction id from the Gravity TX pool, this prevents ID
	// duplication during chain upgrades
	LastTxPoolId uint64 `protobuf:"varint,6,opt,name=last_tx_pool_id,json=lastTxPoolId,proto3" json:"last_tx_pool_id,omitempty"`
	// the last batch id from the Gravity batch pool, this prevents ID duplication
	// during chain upgrades
	LastBatchId uint64 `protobuf:"varint,7,opt,name=last_batch_id,json=lastBatchId,proto3" json:"last_batch_id,omitempty"`
}

func (m *GravityNonces) Reset()         { *m = GravityNonces{} }
func (m *GravityNonces) String() string { return proto.CompactTextString(m) }
func (*GravityNonces) ProtoMessage()    {}
func (*GravityNonces) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{4}
}
func (m *GravityNonces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GravityNonces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GravityNonces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GravityNonces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityNonces.Merge(m, src)
}
func (m *GravityNonces) XXX_Size() int {
	return m.Size()
}
func (m *GravityNonces) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityNonces.DiscardUnknown(m)
}

var xxx_messageInfo_GravityNonces proto.InternalMessageInfo

func (m *GravityNonces) GetLatestValsetNonce() uint64 {
	if m != nil {
		return m.LatestValsetNonce
	}
	return 0
}

func (m *GravityNonces) GetLastObservedNonce() uint64 {
	if m != nil {
		return m.LastObservedNonce
	}
	return 0
}

func (m *GravityNonces) GetLastSlashedValsetNonce() uint64 {
	if m != nil {
		return m.LastSlashedValsetNonce
	}
	return 0
}

func (m *GravityNonces) GetLastSlashedBatchBlock() uint64 {
	if m != nil {
		return m.LastSlashedBatchBlock
	}
	return 0
}

func (m *GravityNonces) GetLastSlashedLogicCallBlock() uint64 {
	if m != nil {
		return m.LastSlashedLogicCallBlock
	}
	return 0
}

func (m *GravityNonces) GetLastTxPoolId() uint64 {
	if m != nil {
		return m.LastTxPoolId
	}
	return 0
}

func (m *GravityNonces) GetLastBatchId() uint64 {
	if m != nil {
		return m.LastBatchId
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "gravity.v1.Params")
	proto.RegisterType((*ChainParam)(nil), "gravity.v1.ChainParam")
	proto.RegisterType((*GenesisState)(nil), "gravity.v1.GenesisState")
	proto.RegisterType((*GravityChain)(nil), "gravity.v1.GravityChain")
	proto.RegisterType((*GravityNonces)(nil), "gravity.v1.GravityNonces")
}

func init() { proto.RegisterFile("gravity/v1/genesis.proto", fileDescriptor_387b0aba880adb60) }

var fileDescriptor_387b0aba880adb60 = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x4e, 0x1b, 0xc7,
	0x17, 0xc7, 0x40, 0x0c, 0x1c, 0xdb, 0x10, 0x86, 0x8f, 0x0c, 0x24, 0x71, 0x2c, 0xfe, 0x4a, 0x64,
	0xfd, 0x55, 0xd6, 0xe0, 0xaa, 0xad, 0x92, 0xaa, 0x55, 0xf9, 0x08, 0x09, 0x4a, 0x53, 0x90, 0xa1,
	0xad, 0xd4, 0x9b, 0xed, 0x78, 0x77, 0x58, 0x8f, 0x58, 0xef, 0xa0, 0x9d, 0xb1, 0x03, 0x77, 0x7d,
	0x84, 0x3e, 0x56, 0xd4, 0xab, 0x5c, 0x56, 0x55, 0x15, 0x55, 0xc9, 0x0b, 0xf4, 0x11, 0xaa, 0x39,
	0x33, 0xbb, 0x5e, 0x43, 0xae, 0xb8, 0x02, 0x9d, 0xdf, 0xc7, 0x39, 0x3e, 0x73, 0xe6, 0xec, 0x00,
	0x8d, 0x52, 0x36, 0x14, 0xfa, 0xaa, 0x35, 0xdc, 0x6e, 0x45, 0x3c, 0xe1, 0x4a, 0x28, 0xef, 0x22,
	0x95, 0x5a, 0x12, 0x70, 0x88, 0x37, 0xdc, 0x5e, 0x5f, 0x8e, 0x64, 0x24, 0x31, 0xdc, 0x32, 0xff,
	0x59, 0xc6, 0xfa, 0x98, 0xd6, 0x91, 0x2d, 0xb2, 0x52, 0x40, 0xfa, 0x2a, 0x72, 0x96, 0xeb, 0xab,
	0x85, 0x70, 0x97, 0xe9, 0xa0, 0xe7, 0xe2, 0x0f, 0x0a, 0x71, 0xa6, 0x35, 0x57, 0x9a, 0x69, 0x21,
	0x13, 0x87, 0xd6, 0x03, 0xa9, 0xfa, 0x52, 0xb5, 0xba, 0x4c, 0xf1, 0xd6, 0x70, 0xbb, 0xcb, 0x35,
	0xdb, 0x6e, 0x05, 0x52, 0x38, 0x7c, 0xe3, 0x5b, 0x28, 0x1f, 0xb3, 0x94, 0xf5, 0x15, 0xf1, 0xa0,
	0x1c, 0xf4, 0x98, 0x48, 0x14, 0x2d, 0x35, 0xa6, 0x9a, 0x95, 0xf6, 0xaa, 0x37, 0xfa, 0x0d, 0xde,
	0x9e, 0x41, 0x90, 0xd8, 0x71, 0xac, 0x67, 0xd3, 0xbf, 0xfd, 0xdd, 0x98, 0xd8, 0x78, 0x3f, 0x07,
	0x30, 0x02, 0xc9, 0x43, 0xc8, 0x7e, 0xb9, 0x2f, 0x42, 0x5a, 0x6a, 0x94, 0x9a, 0x73, 0x9d, 0x39,
	0x17, 0x39, 0x0c, 0xc9, 0x16, 0x2c, 0x07, 0x32, 0xd1, 0x29, 0x0b, 0xb4, 0xaf, 0xe4, 0x20, 0x0d,
	0xb8, 0xdf, 0x63, 0xaa, 0x47, 0x27, 0x91, 0x48, 0x32, 0xec, 0x04, 0xa1, 0x97, 0x4c, 0xf5, 0xc8,
	0x97, 0x70, 0xaf, 0x9b, 0x8a, 0x30, 0xe2, 0x3e, 0xd7, 0x3d, 0x9e, 0xf2, 0x41, 0xdf, 0x67, 0x61,
	0x98, 0x72, 0xa5, 0xe8, 0x34, 0x8a, 0x56, 0x2c, 0xfc, 0xdc, 0xa1, 0x3b, 0x16, 0x24, 0x4f, 0x60,
	0xc1, 0xe9, 0xb0, 0x5c, 0x53, 0xcd, 0x9d, 0x46, 0xa9, 0x39, 0xdd, 0xa9, 0xd9, 0x30, 0xd6, 0x7c,
	0x18, 0x92, 0x36, 0xac, 0x28, 0x11, 0x25, 0x3c, 0xf4, 0x87, 0x2c, 0x56, 0x5c, 0x2b, 0xff, 0x8d,
	0x48, 0x42, 0xf9, 0x86, 0x96, 0x91, 0xbd, 0x64, 0xc1, 0x9f, 0x2c, 0xf6, 0x33, 0x42, 0x05, 0x0d,
	0x9e, 0x03, 0xcf, 0x35, 0x33, 0x45, 0xcd, 0xae, 0xc5, 0x9c, 0xe6, 0x29, 0xac, 0x39, 0x4d, 0x2c,
	0x23, 0x11, 0xf8, 0x01, 0x8b, 0xe3, 0x5c, 0x37, 0x8b, 0xba, 0x55, 0x4b, 0xf8, 0xde, 0xe0, 0x7b,
	0x06, 0x76, 0xd2, 0x2d, 0x58, 0xd6, 0x2c, 0x8d, 0xb8, 0xb6, 0xe9, 0x7c, 0x2d, 0xfa, 0x5c, 0x0e,
	0x34, 0x9d, 0x43, 0x15, 0xb1, 0x18, 0x66, 0x3b, 0xb5, 0x08, 0xf9, 0x0c, 0x08, 0x1b, 0xf2, 0x94,
	0x45, 0xdc, 0xef, 0xc6, 0x32, 0x38, 0x47, 0x09, 0x05, 0xe4, 0xdf, 0x75, 0xc8, 0xae, 0x01, 0x8c,
	0x80, 0x7c, 0x03, 0xf7, 0x33, 0x76, 0xde, 0xe3, 0x82, 0xac, 0x82, 0x32, 0xea, 0x28, 0x59, 0x9f,
	0x47, 0xf2, 0x2e, 0xac, 0xa8, 0x98, 0xa9, 0x9e, 0x7f, 0x66, 0x8e, 0x4e, 0xc8, 0xc4, 0x75, 0x92,
	0x56, 0x1b, 0xa5, 0x66, 0x75, 0xd7, 0x7b, 0xfb, 0xfe, 0xd1, 0xc4, 0x5f, 0xef, 0x1f, 0x3d, 0x89,
	0x84, 0xee, 0x0d, 0xba, 0x5e, 0x20, 0xfb, 0x2d, 0x37, 0x93, 0xf6, 0xcf, 0xa6, 0x0a, 0xcf, 0x5b,
	0xfa, 0xea, 0x82, 0x2b, 0x6f, 0x9f, 0x07, 0x9d, 0x25, 0x34, 0x3b, 0x70, 0x5e, 0xb6, 0xf1, 0xe4,
	0x57, 0x58, 0xbe, 0x96, 0x03, 0x5b, 0x41, 0x6b, 0xb7, 0x4a, 0x41, 0xc6, 0x52, 0x60, 0xe7, 0x88,
	0x80, 0xb5, 0x6b, 0x19, 0x46, 0xe7, 0x44, 0xe7, 0x6f, 0x95, 0x66, 0x75, 0x2c, 0x4d, 0x7e, 0xac,
	0x64, 0x0f, 0xea, 0x83, 0xa4, 0x2b, 0x93, 0xd0, 0x47, 0x82, 0x48, 0xa2, 0xeb, 0xb3, 0xb7, 0x80,
	0x2d, 0xbf, 0x6f, 0x59, 0x27, 0x8e, 0x34, 0x3e, 0x83, 0x43, 0x68, 0xdc, 0xe8, 0x48, 0x68, 0xce,
	0xcf, 0x37, 0x53, 0xc4, 0xf4, 0x20, 0xe5, 0xf4, 0xee, 0xad, 0xca, 0x7e, 0x70, 0xad, 0x3b, 0xe1,
	0x73, 0xdd, 0x3b, 0xc9, 0x3c, 0xc9, 0x3e, 0xd4, 0x6c, 0xb1, 0x7e, 0xca, 0xdf, 0xb0, 0x34, 0xa4,
	0x8b, 0x8d, 0x52, 0xb3, 0xd2, 0x5e, 0xf3, 0xac, 0x97, 0x67, 0xf6, 0x8c, 0xe7, 0xf6, 0x8c, 0xb7,
	0x27, 0x45, 0xb2, 0x3b, 0x6d, 0xf2, 0x77, 0xaa, 0x56, 0xd5, 0x41, 0x11, 0xf9, 0x1f, 0xb8, 0x6b,
	0xe8, 0x9b, 0x2c, 0x43, 0x4e, 0x49, 0xa3, 0xd4, 0x9c, 0xed, 0x54, 0x6d, 0x70, 0x07, 0x63, 0x64,
	0x13, 0x48, 0x61, 0x1e, 0x59, 0x70, 0x1e, 0x0b, 0xa5, 0xe9, 0x52, 0x63, 0xaa, 0x39, 0xd7, 0x59,
	0xe4, 0xf9, 0x1c, 0x3a, 0x80, 0x3c, 0x83, 0xf5, 0xbe, 0x48, 0xdc, 0x75, 0x3f, 0xe3, 0xdc, 0xef,
	0x32, 0x25, 0x94, 0x7f, 0x21, 0x45, 0xa2, 0x15, 0x5d, 0xb6, 0x57, 0xac, 0x2f, 0x12, 0xbc, 0xf9,
	0x07, 0x9c, 0xef, 0x1a, 0xf8, 0x18, 0x51, 0xb2, 0x06, 0xb3, 0xf9, 0x9a, 0x58, 0xc1, 0xb5, 0x32,
	0x13, 0xd8, 0x05, 0xb1, 0x11, 0x43, 0xf5, 0x85, 0x5d, 0xed, 0x27, 0x9a, 0x69, 0x4e, 0xfe, 0x0f,
	0xe5, 0x0b, 0x5c, 0x98, 0xb8, 0xdd, 0x2a, 0x6d, 0x52, 0x5c, 0x93, 0x76, 0x95, 0x76, 0x1c, 0x83,
	0x6c, 0xe5, 0x2b, 0x75, 0x12, 0x57, 0x2a, 0x2d, 0x72, 0x5f, 0xd8, 0x7f, 0xb1, 0x9c, 0x6c, 0xa9,
	0x6e, 0xfc, 0x51, 0x86, 0x6a, 0x11, 0x18, 0xab, 0xac, 0x34, 0x56, 0x19, 0x39, 0x80, 0xf9, 0x6c,
	0xd7, 0x26, 0x32, 0x09, 0xb8, 0xc2, 0x35, 0x6a, 0xce, 0xe2, 0x66, 0x96, 0x1f, 0x90, 0xe0, 0xce,
	0xa2, 0x16, 0x15, 0x83, 0xa4, 0x0d, 0x33, 0x6e, 0xfe, 0xe8, 0x14, 0x96, 0x39, 0xf6, 0x93, 0xec,
	0xd8, 0x39, 0x65, 0x46, 0x24, 0xaf, 0x60, 0xc1, 0x8d, 0x41, 0x20, 0x93, 0x33, 0x91, 0xf6, 0xcd,
	0x3a, 0x36, 0xda, 0x07, 0x45, 0xed, 0x6b, 0xe5, 0xa6, 0x76, 0xcf, 0x92, 0x9c, 0xcb, 0xfc, 0xb0,
	0x18, 0x54, 0xe4, 0x6b, 0x98, 0x71, 0x8b, 0x94, 0xde, 0x41, 0x93, 0xfb, 0x45, 0x93, 0xa3, 0x81,
	0x8e, 0xa4, 0x48, 0xa2, 0xd3, 0x4b, 0xbc, 0xa9, 0x59, 0x25, 0x4e, 0x41, 0x5e, 0xc2, 0xbc, 0x5d,
	0x8b, 0x79, 0x21, 0xe5, 0x9b, 0x1e, 0xaf, 0x55, 0x94, 0x95, 0x50, 0xf0, 0xa8, 0xa1, 0x30, 0x2f,
	0x63, 0x1f, 0x2a, 0x85, 0xdd, 0x4c, 0x67, 0xd0, 0xe6, 0xe1, 0xa7, 0x4a, 0xc9, 0xef, 0xb2, 0x33,
	0x82, 0x38, 0xdf, 0xd9, 0xe4, 0x47, 0x58, 0x1a, 0xb9, 0x8c, 0x8a, 0x9a, 0x45, 0xb7, 0x47, 0x9f,
	0x2e, 0xea, 0xba, 0xdf, 0x62, 0xee, 0x97, 0x17, 0xb7, 0x03, 0xd5, 0xc2, 0xc7, 0x5d, 0xd1, 0x39,
	0xf4, 0xbb, 0x57, 0xf4, 0xdb, 0x19, 0xe1, 0xd9, 0xa5, 0x2b, 0x4a, 0xc8, 0x31, 0xd4, 0x42, 0x1e,
	0xf3, 0x88, 0x69, 0xee, 0x9f, 0xf3, 0x2b, 0x45, 0x01, 0x3d, 0x1e, 0x5f, 0xab, 0xe9, 0x84, 0xeb,
	0xa3, 0xd4, 0xb4, 0x56, 0xa7, 0x4c, 0xcb, 0xd4, 0x7d, 0x50, 0x33, 0xc7, 0xcc, 0xe1, 0x15, 0xbf,
	0x52, 0xe4, 0x00, 0x16, 0x78, 0x1a, 0xb4, 0xb7, 0x7c, 0x2d, 0xfd, 0x90, 0x27, 0xb2, 0xaf, 0x68,
	0xe5, 0xe6, 0xa0, 0x3f, 0xef, 0xec, 0xb5, 0xb7, 0x4e, 0xe5, 0xbe, 0x21, 0x64, 0x9d, 0x47, 0x99,
	0x8b, 0x61, 0xcf, 0x06, 0x89, 0x3d, 0xd0, 0xd0, 0xd7, 0x29, 0x4b, 0xd4, 0x19, 0x4f, 0x15, 0xad,
	0xa2, 0x57, 0xfd, 0x93, 0xc3, 0xe0, 0x48, 0xa7, 0x97, 0xce, 0x91, 0xe4, 0x06, 0x19, 0xa4, 0x36,
	0xfe, 0x9d, 0x84, 0xda, 0xd8, 0xfc, 0x13, 0x0f, 0x96, 0x62, 0x66, 0x5a, 0xe2, 0x36, 0xae, 0xbd,
	0x38, 0x78, 0xb1, 0xa6, 0x3b, 0x8b, 0x16, 0xb2, 0x13, 0x8b, 0x02, 0xcb, 0x57, 0xda, 0x97, 0x5d,
	0xc5, 0xd3, 0x21, 0x0f, 0x1d, 0x7f, 0x32, 0xe3, 0x2b, 0x7d, 0xe4, 0x10, 0xcb, 0x7f, 0x0a, 0x6b,
	0xc8, 0xc7, 0x15, 0x9a, 0xbf, 0x29, 0x9c, 0x6a, 0xca, 0xae, 0x20, 0x43, 0x38, 0xb1, 0x78, 0x31,
	0xd5, 0x57, 0x40, 0xc7, 0xa4, 0x76, 0xa8, 0xf1, 0x3b, 0x8c, 0x2f, 0x9d, 0xe9, 0xce, 0x4a, 0x41,
	0x69, 0xc7, 0xd8, 0x80, 0xe4, 0x3b, 0x78, 0x38, 0x26, 0x2c, 0x4c, 0x9f, 0x55, 0xdb, 0x77, 0xcf,
	0x5a, 0x41, 0x3d, 0x9a, 0x37, 0x74, 0x78, 0x0c, 0x0b, 0xe8, 0xa0, 0x2f, 0xfd, 0x0b, 0x29, 0x63,
	0xb3, 0x6a, 0xec, 0xeb, 0xa7, 0x6a, 0xc2, 0xa7, 0x97, 0xc7, 0x52, 0xc6, 0x87, 0x21, 0xd9, 0x80,
	0x1a, 0xd2, 0x6c, 0x65, 0x22, 0x74, 0xcf, 0x9d, 0x8a, 0x09, 0x62, 0x3d, 0x87, 0xe1, 0xee, 0xd1,
	0xdb, 0x0f, 0xf5, 0xd2, 0xbb, 0x0f, 0xf5, 0xd2, 0x3f, 0x1f, 0xea, 0xa5, 0xdf, 0x3f, 0xd6, 0x27,
	0xde, 0x7d, 0xac, 0x4f, 0xfc, 0xf9, 0xb1, 0x3e, 0xf1, 0xcb, 0x17, 0x85, 0xcf, 0x4f, 0x5f, 0x24,
	0xfc, 0x22, 0xe6, 0x97, 0x42, 0xe6, 0xff, 0x6e, 0xb6, 0x37, 0x13, 0x19, 0xf2, 0xd6, 0x65, 0xf6,
	0x18, 0xb6, 0x5f, 0xa4, 0x6e, 0x19, 0x9f, 0xa9, 0x9f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x25,
	0xc4, 0xe2, 0xe1, 0x6b, 0x0b, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.MinChainFeeBasisPoints != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinChainFeeBasisPoints))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.EthereumBlacklist) > 0 {
		for iNdEx := len(m.EthereumBlacklist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EthereumBlacklist[iNdEx])
			copy(dAtA[i:], m.EthereumBlacklist[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.EthereumBlacklist[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.BridgeActive {
		i--
		if m.BridgeActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	{
		size, err := m.ValsetReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.SlashFractionBadEthSignature.Size()
		i -= size
		if _, err := m.SlashFractionBadEthSignature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.UnbondSlashingValsetsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UnbondSlashingValsetsWindow))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.SlashFractionLogicCall.Size()
		i -= size
		if _, err := m.SlashFractionLogicCall.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.SlashFractionBatch.Size()
		i -= size
		if _, err := m.SlashFractionBatch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.SlashFractionValset.Size()
		i -= size
		if _, err := m.SlashFractionValset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.AverageEthereumBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageEthereumBlockTime))
		i--
		dAtA[i] = 0x58
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x50
	}
	if m.TargetBatchTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TargetBatchTimeout))
		i--
		dAtA[i] = 0x48
	}
	if m.SignedLogicCallsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedLogicCallsWindow))
		i--
		dAtA[i] = 0x40
	}
	if m.SignedBatchesWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedBatchesWindow))
		i--
		dAtA[i] = 0x38
	}
	if m.SignedValsetsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedValsetsWindow))
		i--
		dAtA[i] = 0x30
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BridgeEthereumAddress) > 0 {
		i -= len(m.BridgeEthereumAddress)
		copy(dAtA[i:], m.BridgeEthereumAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BridgeEthereumAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractSourceHash) > 0 {
		i -= len(m.ContractSourceHash)
		copy(dAtA[i:], m.ContractSourceHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ContractSourceHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GravityId) > 0 {
		i -= len(m.GravityId)
		copy(dAtA[i:], m.GravityId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GravityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GravityChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GravityChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GravityChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.DelegateKeys) > 0 {
		for iNdEx := len(m.DelegateKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.LogicCallConfirms) > 0 {
		for iNdEx := len(m.LogicCallConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogicCallConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LogicCalls) > 0 {
		for iNdEx := len(m.LogicCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogicCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BatchConfirms) > 0 {
		for iNdEx := len(m.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for iNdEx := len(m.ValsetConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Valsets) > 0 {
		for iNdEx := len(m.Valsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.GravityNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GravityNonces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GravityNonces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GravityNonces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBatchId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastBatchId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastTxPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastTxPoolId))
		i--
		dAtA[i] = 0x30
	}
	if m.LastSlashedLogicCallBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedLogicCallBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.LastSlashedBatchBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedBatchBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.LastSlashedValsetNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedValsetNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.LastObservedNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.LatestValsetNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestValsetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ChainParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GravityId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ContractSourceHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.BridgeEthereumAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovGenesis(uint64(m.BridgeChainId))
	}
	if m.SignedValsetsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedValsetsWindow))
	}
	if m.SignedBatchesWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedBatchesWindow))
	}
	if m.SignedLogicCallsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedLogicCallsWindow))
	}
	if m.TargetBatchTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.TargetBatchTimeout))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageBlockTime))
	}
	if m.AverageEthereumBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageEthereumBlockTime))
	}
	l = m.SlashFractionValset.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionBatch.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionLogicCall.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.UnbondSlashingValsetsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.UnbondSlashingValsetsWindow))
	}
	l = m.SlashFractionBadEthSignature.Size()
	n += 2 + l + sovGenesis(uint64(l))
	l = m.ValsetReward.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if m.BridgeActive {
		n += 3
	}
	if len(m.EthereumBlacklist) > 0 {
		for _, s := range m.EthereumBlacklist {
			l = len(s)
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.MinChainFeeBasisPoints != 0 {
		n += 2 + sovGenesis(uint64(m.MinChainFeeBasisPoints))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 2 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GravityChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.GravityNonces.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Valsets) > 0 {
		for _, e := range m.Valsets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for _, e := range m.ValsetConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchConfirms) > 0 {
		for _, e := range m.BatchConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LogicCalls) > 0 {
		for _, e := range m.LogicCalls {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LogicCallConfirms) > 0 {
		for _, e := range m.LogicCallConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegateKeys) > 0 {
		for _, e := range m.DelegateKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GravityNonces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestValsetNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LatestValsetNonce))
	}
	if m.LastObservedNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedNonce))
	}
	if m.LastSlashedValsetNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedValsetNonce))
	}
	if m.LastSlashedBatchBlock != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedBatchBlock))
	}
	if m.LastSlashedLogicCallBlock != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedLogicCallBlock))
	}
	if m.LastTxPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.LastTxPoolId))
	}
	if m.LastBatchId != 0 {
		n += 1 + sovGenesis(uint64(m.LastBatchId))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &ChainParam{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeEthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeEthereumAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedValsetsWindow", wireType)
			}
			m.SignedValsetsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedValsetsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBatchesWindow", wireType)
			}
			m.SignedBatchesWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBatchesWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedLogicCallsWindow", wireType)
			}
			m.SignedLogicCallsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedLogicCallsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBatchTimeout", wireType)
			}
			m.TargetBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEthereumBlockTime", wireType)
			}
			m.AverageEthereumBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageEthereumBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionValset", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionValset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionLogicCall", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionLogicCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondSlashingValsetsWindow", wireType)
			}
			m.UnbondSlashingValsetsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondSlashingValsetsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBadEthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBadEthSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValsetReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeActive = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumBlacklist = append(m.EthereumBlacklist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinChainFeeBasisPoints", wireType)
			}
			m.MinChainFeeBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinChainFeeBasisPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &GravityChain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GravityChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GravityChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GravityChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GravityNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valsets = append(m.Valsets, Valset{})
			if err := m.Valsets[len(m.Valsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetConfirms = append(m.ValsetConfirms, MsgValsetConfirm{})
			if err := m.ValsetConfirms[len(m.ValsetConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirms = append(m.BatchConfirms, MsgConfirmBatch{})
			if err := m.BatchConfirms[len(m.BatchConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicCalls = append(m.LogicCalls, OutgoingLogicCall{})
			if err := m.LogicCalls[len(m.LogicCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicCallConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicCallConfirms = append(m.LogicCallConfirms, MsgConfirmLogicCall{})
			if err := m.LogicCallConfirms[len(m.LogicCallConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateKeys = append(m.DelegateKeys, MsgSetOrchestratorAddress{})
			if err := m.DelegateKeys[len(m.DelegateKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GravityNonces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GravityNonces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GravityNonces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestValsetNonce", wireType)
			}
			m.LatestValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNonce", wireType)
			}
			m.LastObservedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedValsetNonce", wireType)
			}
			m.LastSlashedValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedBatchBlock", wireType)
			}
			m.LastSlashedBatchBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedBatchBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedLogicCallBlock", wireType)
			}
			m.LastSlashedLogicCallBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedLogicCallBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTxPoolId", wireType)
			}
			m.LastTxPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTxPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBatchId", wireType)
			}
			m.LastBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
